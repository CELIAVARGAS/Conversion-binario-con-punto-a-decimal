
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package binariosconpunto;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parseO extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parseO() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parseO(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parseO(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\006\003\000\002\005" +
    "\005\000\002\005\003\000\002\004\004\000\002\004\003" +
    "\000\002\003\004\000\002\003\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\014\000\004\004\006\001\002\000\010\002\ufffe\004" +
    "\006\005\012\001\002\000\004\002\000\001\002\000\010" +
    "\002\ufff9\004\ufff9\005\ufff9\001\002\000\004\002\011\001" +
    "\002\000\010\002\ufffc\004\ufffc\005\ufffc\001\002\000\004" +
    "\002\001\001\002\000\004\004\006\001\002\000\010\002" +
    "\ufffd\004\ufffd\005\ufffd\001\002\000\004\002\uffff\001\002" +
    "\000\006\002\ufffa\004\006\001\002\000\004\002\ufffb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\014\000\012\002\007\004\003\005\004\006\006\001" +
    "\001\000\004\002\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\014\003\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\014\003\015\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parseO$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parseO$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parseO$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
            String error =" ERROR Sintactico en token: "+s.value+" en linea: " +(s.left + 1 )+" y columna: "+(s.right + 1)+"\n";
        System.out.println(error);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            String error =" ERROR Sintactico en token: "+s.value+" en linea: " +(s.left + 1 )+" y columna: "+(s.right + 1)+"\n";    
        System.out.println(error);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parseO$actions {
  private final parseO parser;

  /** Constructor */
  CUP$parseO$actions(parseO parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parseO$do_action_part00000000(
    int                        CUP$parseO$act_num,
    java_cup.runtime.lr_parser CUP$parseO$parser,
    java.util.Stack            CUP$parseO$stack,
    int                        CUP$parseO$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parseO$result;

      /* select the action based on the action number */
      switch (CUP$parseO$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)).right;
		Double start_val = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.elementAt(CUP$parseO$top-1)).value;
		RESULT = start_val;
              CUP$parseO$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parseO$parser.done_parsing();
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= cifra 
            {
              Double RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
     System.out.println("El valor es de "+ c);

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("s",4, ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cifra ::= ladoD punto ladoI 
            {
              Double RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-2)).right;
		Double ld = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.elementAt(CUP$parseO$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		Double li = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
    Double  numero = ld+li;
    RESULT = numero;

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("cifra",3, ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-2)), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cifra ::= ladoD 
            {
              Double RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		Double ld = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
    RESULT = ld;

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("cifra",3, ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ladoD ::= ladoD binario 
            {
              Double RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)).right;
		Double ld = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.elementAt(CUP$parseO$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
    System.out.println("\t\t / ladoDerecho -> "+ ld);
    System.out.println("\t\t \\ binario -> "+ b);
    Double numero= ((2* ld )+ b); 
    System.out.println("\t Total derecho: "+ numero);
    System.out.println("");
    RESULT = numero;

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("ladoD",2, ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ladoD ::= binario 
            {
              Double RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
    System.out.println("\t\t\t\t / binario -> "+ b);
    RESULT= b;

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("ladoD",2, ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ladoI ::= binario ladoI 
            {
              Double RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.elementAt(CUP$parseO$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		Double li = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
    Double ladoI=(li*1/2);
    Double binI=(b*1/2);
    Double numero=(ladoI + binI);
    System.out.println("\t\t / ladoIzquierdo -> "+ ladoI);
    System.out.println("\t\t \\ binario -> "+ binI);
    System.out.println("\t Total izquierdo: "+ numero);
    System.out.println("");

    RESULT = numero;

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("ladoI",1, ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ladoI ::= binario 
            {
              Double RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
    Double numero = (b*1/2);
    RESULT = numero;
    System.out.println("\t\t\t\t / binario -> "+ numero);

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("ladoI",1, ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // binario ::= numeroBinario 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
    RESULT = new Double(n);

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("binario",0, ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parseO$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parseO$do_action(
    int                        CUP$parseO$act_num,
    java_cup.runtime.lr_parser CUP$parseO$parser,
    java.util.Stack            CUP$parseO$stack,
    int                        CUP$parseO$top)
    throws java.lang.Exception
    {
              return CUP$parseO$do_action_part00000000(
                               CUP$parseO$act_num,
                               CUP$parseO$parser,
                               CUP$parseO$stack,
                               CUP$parseO$top);
    }
}

}
